/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTableModel;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import hr.algebra.utils.ValidationUtils;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author bisiv
 */
public class UserUIPersonTab extends javax.swing.JPanel {

    private final UserUI.PersonTypeDialog personType;
    private Repository repository;
    private List<JComponent> validationFields;
    private List<JLabel> errorLabels;

    private PersonTableModel personTableModel;
    private Person selectedPerson;

    private static final String DEFAULT_IMG = "assets/graphics/defaultImg.jpg";
    private static final Random RANDOM = new Random();
    private static final String DIR = "assets";
    private final String msg;

    /**
     * Creates new form UserUIPerson
     *
     * @param personType
     */
    public UserUIPersonTab(UserUI.PersonTypeDialog personType) {
        this.personType = personType;
        this.msg = personType == UserUI.PersonTypeDialog.ACTOR ? "Actor" : "Director";

        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbIcon = new javax.swing.JLabel();
        btnChoose = new javax.swing.JButton();
        tfPicturePath = new javax.swing.JTextField();
        lbIconError = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lbFirstNameError = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPeople = new javax.swing.JTable();
        tfFirstName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfLastName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lbLastNameError = new javax.swing.JLabel();
        cbDirector = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(1200, 780));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIcon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbIcon.setName(""); // NOI18N
        add(lbIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 10, 250, 340));

        btnChoose.setText("Choose");
        btnChoose.setActionCommand("");
        btnChoose.setName("Choose"); // NOI18N
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });
        add(btnChoose, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 160, 100, 30));

        tfPicturePath.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tfPicturePath.setEnabled(false);
        add(tfPicturePath, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 160, 800, 30));

        lbIconError.setForeground(new java.awt.Color(204, 0, 0));
        lbIconError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lbIconError, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 20, 30));

        btnDelete.setBackground(new java.awt.Color(204, 0, 0));
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setName("Delete"); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 250, 30));

        btnAdd.setBackground(new java.awt.Color(0, 0, 204));
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.setName("AddPerson"); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 120, 30));

        btnUpdate.setText("Update");
        btnUpdate.setName("Update"); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 370, 120, 30));

        lbFirstNameError.setForeground(new java.awt.Color(204, 0, 0));
        lbFirstNameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lbFirstNameError, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, 20, 30));

        tblPeople.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPeople.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPeopleMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblPeopleMouseReleased(evt);
            }
        });
        tblPeople.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblPeopleKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tblPeople);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 200, 930, 500));
        add(tfFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, 290, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("First name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 100, 30));

        tfLastName.setName(""); // NOI18N
        add(tfLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 290, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Last name");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 70, 100, 30));

        lbLastNameError.setForeground(new java.awt.Color(204, 0, 0));
        lbLastNameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lbLastNameError, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 70, 20, 30));

        cbDirector.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbDirector.setText("Director");
        add(cbDirector, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 113, 160, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        Optional<File> file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.get().getAbsolutePath());
        setIcon(lbIcon, file.get());
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        if (selectedPerson == null) {
            MessageUtils.showInformationMessage("Wrong operation", msg + " not selected");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete " + msg,
                "Do you really want to delete " + msg + "?") == JOptionPane.YES_OPTION) {
            try {
                if (personType == UserUI.PersonTypeDialog.ACTOR) {
                    if (!selectedPerson.getPicturePath().equals(DEFAULT_IMG)) {
                        Files.deleteIfExists(Paths.get(selectedPerson.getPicturePath()));
                    }
                    repository.deleteActor(selectedPerson.getId());
                    personTableModel.SetPeople(repository.selectActors());
                } else {
                    if (!selectedPerson.getPicturePath().equals(DEFAULT_IMG)) {
                        Files.deleteIfExists(Paths.get(selectedPerson.getPicturePath()));
                    }
                    repository.deleteDirector(selectedPerson.getId());
                    personTableModel.SetPeople(repository.selectDirectors());
                }

                clearForm();
            } catch (Exception e) {
                MessageUtils.showErrorMessage("Error", "Unable to delete " + msg);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        tblPeople.clearSelection();
        if (ValidationUtils.CheckFormValidation(validationFields, errorLabels)) {
            try {
                String localPicturePath = uploadPicture();
                Person person = new Person(
                        tfFirstName.getText(),
                        tfLastName.getText(),
                        localPicturePath,
                        cbDirector.isSelected()
                );
                
                if (!person.isDirector()) {
                    repository.createActor(person);
                    personTableModel.SetPeople(repository.selectActors());
                } else {
                    repository.createDirector(person);
                    personTableModel.SetPeople(repository.selectDirectors());
                }
            } catch (IOException ex) {
                Logger.getLogger(UserUIPersonTab.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(UserUIPersonTab.class.getName()).log(Level.SEVERE, null, ex);
            }
            clearForm();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            if (ValidationUtils.CheckFormValidation(validationFields, errorLabels)) {
                int selectedRow = tblPeople.getSelectedRow();
                int rowIndex = tblPeople.convertRowIndexToModel(selectedRow);
                int selectedPersonId = (int) personTableModel.getValueAt(rowIndex, 0);

                Person person = new Person(
                        selectedPersonId,
                        tfFirstName.getText(),
                        tfLastName.getText(),
                        tfPicturePath.getText()
                );

                if (personType == UserUI.PersonTypeDialog.ACTOR) {
                    repository.updateActor(selectedPersonId, person);
                    clearForm();
                    tblPeople.clearSelection();
                    initTable();
                }
                else
                {
                    repository.updateDirector(selectedPersonId, person);
                    clearForm();
                    tblPeople.clearSelection();
                    initTable();
                }
            }

        } catch (Exception e) {
            MessageUtils.showInformationMessage("Wrong operation", msg + " not selected");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblPeopleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPeopleMouseClicked
        showPersonDetails();
    }//GEN-LAST:event_tblPeopleMouseClicked

    private void tblPeopleMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPeopleMouseReleased
        showPersonDetails();
    }//GEN-LAST:event_tblPeopleMouseReleased

    private void tblPeopleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblPeopleKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
            showPersonDetails();
        }

        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            tblPeople.clearSelection();
            clearForm();
        }
    }//GEN-LAST:event_tblPeopleKeyReleased

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        clearForm();
        tblPeople.clearSelection();
    }//GEN-LAST:event_formComponentHidden


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox cbDirector;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbFirstNameError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbIconError;
    private javax.swing.JLabel lbLastNameError;
    private javax.swing.JTable tblPeople;
    private javax.swing.JTextField tfFirstName;
    private javax.swing.JTextField tfLastName;
    private javax.swing.JTextField tfPicturePath;
    // End of variables declaration//GEN-END:variables

    private void init() {
        initValidation();
        initRepository();
        initTable();
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfFirstName, tfLastName);
        errorLabels = Arrays.asList(lbFirstNameError, lbLastNameError);
    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() {
        if (personType == UserUI.PersonTypeDialog.ACTOR) {
            try {
                personTableModel = new PersonTableModel(repository.selectActors());
            } catch (Exception ex) {
                Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                personTableModel = new PersonTableModel(repository.selectDirectors());
            } catch (Exception ex) {
                Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        tblPeople.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblPeople.setAutoCreateRowSorter(true);
        tblPeople.setRowHeight(25);
        tblPeople.setModel(personTableModel);

    }

    private void showPersonDetails() {
        int selectedRow = tblPeople.getSelectedRow();
        int rowIndex = tblPeople.convertRowIndexToModel(selectedRow);
        int selectedPersonId = (int) personTableModel.getValueAt(rowIndex, 0);

        if (personType == UserUI.PersonTypeDialog.ACTOR) {
            try {
                Optional<Person> optPerson = repository.selectActor(selectedPersonId);
                if (optPerson.isPresent()) {
                    selectedPerson = optPerson.get();
                    fillForm(selectedPerson);
                }
            } catch (Exception e) {
                MessageUtils.showErrorMessage("Error", "Could not load details");
            }

        } else {
            try {
                Optional<Person> optPerson = repository.selectDirector(selectedPersonId);
                if (optPerson.isPresent()) {
                    selectedPerson = optPerson.get();
                    fillForm(selectedPerson);
                }
            } catch (Exception e) {
                MessageUtils.showErrorMessage("Error", "Could not load details");
            }
        }

    }

    private void fillForm(Person person) {
        if (person.getPicturePath() != null && Files.exists(Paths.get(person.getPicturePath()))) {
            tfPicturePath.setText(person.getPicturePath());
            setIcon(lbIcon, new File(person.getPicturePath()));
        } else {
            tfPicturePath.setText("");
            lbIcon.setIcon(new ImageIcon(getClass().getResource("")));
        }

        tfFirstName.setText(person.getFirstName());
        tfLastName.setText(person.getLastName());
        tfPicturePath.setText(person.getPicturePath());
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.getAbsolutePath(), label.getWidth(), label.getHeight()));
        } catch (IOException e) {
            MessageUtils.showErrorMessage("Error", "Unable to set icon");
        }
    }

    private void clearForm() {

        validationFields.forEach(e -> {
            if (e instanceof JTextComponent) {
                ((JTextComponent) e).setText("");
            }
        });
        errorLabels.forEach(e -> e.setText(""));

        tfFirstName.setText("");
        tfLastName.setText("");
        tfPicturePath.setText("");
        lbIcon.setIcon(new ImageIcon(getClass().getResource("")));
        selectedPerson = null;

    }

    private String uploadPicture() throws IOException {
        String picturePath = tfPicturePath.getText().trim();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = Math.abs(RANDOM.nextInt()) + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }
}
