/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.model.GenreTransferable;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author bisiv
 */
public class GenreDialog extends javax.swing.JDialog {

    private DefaultListModel<String> allGenreModel = new DefaultListModel<>();
    private final DefaultListModel<String> addedGenreModel = new DefaultListModel<>();

    private Set<String> addedGenre = new TreeSet<>();
    private Set<String> allGenre = new TreeSet<>();
    
    private final UserUI parent;

    /**
     * Creates new form GenreDialog
     */
    public GenreDialog(java.awt.Frame parent, boolean modal, Set<String> genreList, Set<String> addedGenre) {
        super(parent, modal);
        this.parent =(UserUI)parent;
        this.allGenre = genreList;
        this.addedGenre = addedGenre;

        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsAllGenre = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsAddedGenre = new javax.swing.JList<>();
        tfSearch = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add genre");

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lsAllGenre);

        jScrollPane2.setViewportView(lsAddedGenre);

        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tfSearch)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSave)
                        .addComponent(btnRemove)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int selectedIndex = lsAddedGenre.getSelectedIndex();
        addedGenreModel.removeElementAt(selectedIndex);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
        String input = tfSearch.getText();
        searchFilter(input);
    }//GEN-LAST:event_tfSearchKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        parent.saveGenre(addedGenreModel);
        this.dispose();
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lsAddedGenre;
    private javax.swing.JList<String> lsAllGenre;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables

    private void searchFilter(String input) {
        DefaultListModel<String> filteredItems = new DefaultListModel<>();

        allGenre.stream()
                .forEach(a -> {
                    String genre = a.toLowerCase();
                    if (genre.contains(input.toLowerCase())) {
                        filteredItems.addElement(a);
                    }
                });
        allGenreModel = filteredItems;
        lsAllGenre.setModel(allGenreModel);
    }

    private void init() {
        initLists();
        initDragNDrop();
    }

    private void initLists() {
        allGenre.forEach(g -> allGenreModel.addElement(g));
        lsAllGenre.setModel(allGenreModel);
        lsAllGenre.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        addedGenre.forEach(g -> addedGenreModel.addElement(g));
        lsAddedGenre.setModel(addedGenreModel);
    }

    private void initDragNDrop() {
        lsAllGenre.setDragEnabled(true);
        lsAllGenre.setTransferHandler(new ExportTransferHandler());

        lsAddedGenre.setDropMode(DropMode.ON);
        lsAddedGenre.setTransferHandler(new ImportTransferHandler());
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new GenreTransferable(lsAllGenre.getSelectedValue());
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                String add = (String) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);
                if (addedGenre.add(add)) {

                    addedGenreModel.clear();
                    addedGenre.forEach(a -> addedGenreModel.addElement(a));
                    lsAddedGenre.setModel(addedGenreModel);
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(PersonDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

    }
}
