/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.model.Person;
import hr.algebra.model.User;
import hr.algebra.utils.JaxbUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.xml.bind.JAXBException;

/**
 *
 * @author bisiv
 */
public class UserUI extends javax.swing.JFrame {

    private static final String MOVIE_TAB = "Movies";
    private static final String ACTORS_TAB = "Actors";
    private static final String DIRECTORS_TAB = "Direcotrs";
    private static final String FILENAME = "moviearchive.xml";

    private List<Movie> movies = new ArrayList<>();
    private UserUIMovieTab movieTab;
    private Repository repository;

    private static User USER;
   
    
    /**
     * Creates new form UserUI
     */
    public UserUI(User user) {
        UserUI.USER = user;
        
        initComponents();
        
        initRepository();
        configPanels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpContent = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jmiAddMovie = new javax.swing.JMenuItem();
        jmiAddActor = new javax.swing.JMenuItem();
        jmiAddDirector = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiLogout = new javax.swing.JMenuItem();
        jmiExit = new javax.swing.JMenuItem();
        jmEdit = new javax.swing.JMenu();
        jmiUpdate = new javax.swing.JMenuItem();
        jmiDelete = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmiExport = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jmiEditProfile = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jmDocs = new javax.swing.JMenuItem();
        jmiVersion = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SneekPeek");
        setPreferredSize(new java.awt.Dimension(1200, 780));
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));
        getContentPane().add(jtpContent);

        jmFile.setMnemonic('F');
        jmFile.setText("File");

        jMenu3.setText("Create new...");

        jmiAddMovie.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiAddMovie.setText("Movie");
        jmiAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddMovieActionPerformed(evt);
            }
        });
        jMenu3.add(jmiAddMovie);

        jmiAddActor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiAddActor.setText("Actor");
        jmiAddActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddActorActionPerformed(evt);
            }
        });
        jMenu3.add(jmiAddActor);

        jmiAddDirector.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiAddDirector.setText("Director");
        jmiAddDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddDirectorActionPerformed(evt);
            }
        });
        jMenu3.add(jmiAddDirector);

        jmFile.add(jMenu3);
        jmFile.add(jSeparator1);

        jmiLogout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiLogout.setText("Logout");
        jmiLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiLogoutActionPerformed(evt);
            }
        });
        jmFile.add(jmiLogout);

        jmiExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmFile.add(jmiExit);

        jMenuBar1.add(jmFile);

        jmEdit.setMnemonic('E');
        jmEdit.setText("Edit");

        jmiUpdate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        jmiUpdate.setText("Update selected");
        jmiUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiUpdateActionPerformed(evt);
            }
        });
        jmEdit.add(jmiUpdate);

        jmiDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jmiDelete.setText("Delete selected");
        jmiDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDeleteActionPerformed(evt);
            }
        });
        jmEdit.add(jmiDelete);
        jmEdit.add(jSeparator2);

        jmiExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jmiExport.setText("Export");
        jmiExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExportActionPerformed(evt);
            }
        });
        jmEdit.add(jmiExport);
        jmEdit.add(jSeparator3);

        jmiEditProfile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jmiEditProfile.setText("Edit profile");
        jmiEditProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEditProfileActionPerformed(evt);
            }
        });
        jmEdit.add(jmiEditProfile);

        jMenuBar1.add(jmEdit);

        jMenu2.setMnemonic('H');
        jMenu2.setText("Help");

        jmDocs.setText("Documentation");
        jmDocs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmDocsActionPerformed(evt);
            }
        });
        jMenu2.add(jmDocs);

        jmiVersion.setText("Show version");
        jmiVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiVersionActionPerformed(evt);
            }
        });
        jMenu2.add(jmiVersion);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jmiLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiLogoutActionPerformed

        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jmiLogoutActionPerformed

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jmiExitActionPerformed

    private void jmDocsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmDocsActionPerformed
        try {
            Desktop.getDesktop().browse(new URL("https://www.youtube.com/watch?v=dQw4w9WgXcQ").toURI());
        } catch (IOException | URISyntaxException e) {
            MessageUtils.showErrorMessage("Error", "Cannot load documentation");

        }
    }//GEN-LAST:event_jmDocsActionPerformed

    private void jmiAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddMovieActionPerformed
        JButton btn = findButton("Add", 0);

        ActionListener[] actionListeners = btn.getActionListeners();
        actionListeners[0].actionPerformed(evt);

    }//GEN-LAST:event_jmiAddMovieActionPerformed

    private void jmiUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiUpdateActionPerformed
        JButton btn = findButton("Update", jtpContent.getSelectedIndex());

        ActionListener[] actionListeners = btn.getActionListeners();
        actionListeners[0].actionPerformed(evt);
    }//GEN-LAST:event_jmiUpdateActionPerformed

    private void jmiDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDeleteActionPerformed
        JButton btn = findButton("Delete", jtpContent.getSelectedIndex());

        ActionListener[] actionListeners = btn.getActionListeners();
        actionListeners[0].actionPerformed(evt);
    }//GEN-LAST:event_jmiDeleteActionPerformed

    private void jmiAddActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddActorActionPerformed
        JButton btn = findButton("AddPerson", 1);

        ActionListener[] actionListeners = btn.getActionListeners();
        actionListeners[0].actionPerformed(evt);
    }//GEN-LAST:event_jmiAddActorActionPerformed

    private void jmiAddDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddDirectorActionPerformed
        JButton btn = findButton("AddPerson", 2);

        ActionListener[] actionListeners = btn.getActionListeners();
        actionListeners[0].actionPerformed(evt);
    }//GEN-LAST:event_jmiAddDirectorActionPerformed

    private void jmiExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExportActionPerformed
        try {
            movies = repository.selectMovies();
            
            JaxbUtils.save(new MovieArchive(movies), MovieArchive.class, FILENAME);
            MessageUtils.showInformationMessage("Info", "Movies exported");
        } catch (JAXBException ex) {
            MessageUtils.showErrorMessage("Error", "Unable to export movies");
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmiExportActionPerformed

    private void jmiVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiVersionActionPerformed
        MessageUtils.showInformationMessage("Version", "SneakPeek version 1.0, no rights reserved, pls dont sue");
    }//GEN-LAST:event_jmiVersionActionPerformed

    private void jmiEditProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEditProfileActionPerformed
        new ProfileDialog(this, true, USER).setVisible(true);
    }//GEN-LAST:event_jmiEditProfileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UserUI(USER).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem jmDocs;
    private javax.swing.JMenu jmEdit;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenuItem jmiAddActor;
    private javax.swing.JMenuItem jmiAddDirector;
    private javax.swing.JMenuItem jmiAddMovie;
    private javax.swing.JMenuItem jmiDelete;
    private javax.swing.JMenuItem jmiEditProfile;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiExport;
    private javax.swing.JMenuItem jmiLogout;
    private javax.swing.JMenuItem jmiUpdate;
    private javax.swing.JMenuItem jmiVersion;
    private javax.swing.JTabbedPane jtpContent;
    // End of variables declaration//GEN-END:variables

    private void configPanels() {
        movieTab = new UserUIMovieTab(this);
        jtpContent.add(MOVIE_TAB, movieTab);
        jtpContent.add(ACTORS_TAB, new UserUIPersonTab(PersonTypeDialog.ACTOR));
        jtpContent.add(DIRECTORS_TAB, new UserUIPersonTab(PersonTypeDialog.DIRECTOR));
    }

    void savePeople(DefaultListModel<Person> people, PersonTypeDialog type) {

        movieTab.addPeople(people, type);

    }
    
    void saveGenre(DefaultListModel<String> genre){
        movieTab.addGenre(genre);
    }
    
    private JButton findButton(String btnName, int index) {
        jtpContent.setSelectedIndex(index);
        JPanel panel = (JPanel) jtpContent.getComponent(index);

        Component[] components = panel.getComponents();
        List<JButton> buttons = new ArrayList<>();
        JButton btn = new JButton();

        for (int i = 0; i < panel.getComponentCount(); i++) {
            if (components[i] instanceof JButton) {
                buttons.add((JButton) components[i]);
            }
        }

        for (JButton button : buttons) {
            if (button.getName() != null) {
                if (button.getName().equals(btnName)) {
                btn = button;
            }
            }
        }

        return btn;
    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    public void setUser(User user){
         USER = user;
     }
    
    public enum PersonTypeDialog {
        ACTOR,
        DIRECTOR
    }
}
