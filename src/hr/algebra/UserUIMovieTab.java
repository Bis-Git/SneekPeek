/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.UserUI.PersonTypeDialog;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieTableModel;
import hr.algebra.model.Person;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.ListUtils;
import hr.algebra.utils.MessageUtils;
import hr.algebra.utils.ValidationUtils;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;

/**
 *
 * @author bisiv
 */
public class UserUIMovieTab extends javax.swing.JPanel {

    private final JFrame parent;

    private Repository repository;
    private List<JComponent> validationFields;
    private List<JLabel> errorLabels;
    private static final Random RANDOM = new Random();
    private static final String DIR = "assets";

    private final DefaultListModel<Person> actorModel = new DefaultListModel<>();
    private final DefaultListModel<Person> directorModel = new DefaultListModel<>();

    private MovieTableModel movieTableModel;
    private Movie selectedMovie;

    /**
     * Creates new form UserUIMovieTab
     *
     * @param parent
     */
    public UserUIMovieTab(JFrame parent) {
        this.parent = parent;
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbIcon = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfPubDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        lbTitleError = new javax.swing.JLabel();
        lbPubDateError = new javax.swing.JLabel();
        lbGenreError = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        btnAddActors = new javax.swing.JButton();
        btnAddDirectors = new javax.swing.JButton();
        lbActorsError = new javax.swing.JLabel();
        lbDirectorsError = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMovies = new javax.swing.JTable();
        btnChoose = new javax.swing.JButton();
        tfPicturePath = new javax.swing.JTextField();
        lbIconError = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        btnAddGenre = new javax.swing.JButton();
        tfOrigName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        lbOrigNameError = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsGenre = new javax.swing.JList<>();

        setPreferredSize(new java.awt.Dimension(1200, 780));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIcon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbIcon.setName("Icon"); // NOI18N
        add(lbIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 10, 250, 340));

        tfTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        add(tfTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 410, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Title");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 100, 30));

        tfPubDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tfPubDate.setToolTipText("(YYYY-MM-DDTHH:MM:SS)");
        tfPubDate.setName("Date"); // NOI18N
        add(tfPubDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 50, 410, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Publish date");
        jLabel3.setToolTipText("");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, 110, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Genre");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 130, 90, 30));

        taDescription.setColumns(20);
        taDescription.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        taDescription.setWrapStyleWord(true);
        taDescription.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(taDescription);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 160, 340, 150));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Directors");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 150, 100, 30));

        lbTitleError.setForeground(new java.awt.Color(204, 0, 0));
        lbTitleError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lbTitleError, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 10, 20, 30));

        lbPubDateError.setForeground(new java.awt.Color(204, 0, 0));
        lbPubDateError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lbPubDateError, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 50, 18, 30));

        lbGenreError.setForeground(new java.awt.Color(204, 0, 0));
        lbGenreError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lbGenreError, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 90, 18, 30));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Actors");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 10, 100, 30));

        lsActors.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lsActors.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lsActors);
        lsActors.getAccessibleContext().setAccessibleName("");
        lsActors.getAccessibleContext().setAccessibleDescription("");

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 42, 340, 100));

        lsDirectors.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lsDirectors.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(lsDirectors);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 188, 340, 80));

        btnAddActors.setText("Edit actors");
        btnAddActors.setName("Edit actors"); // NOI18N
        btnAddActors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActorsbtnEditActorsActionPerformed(evt);
            }
        });
        add(btnAddActors, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 150, 140, 30));

        btnAddDirectors.setText("Edit directors");
        btnAddDirectors.setName("Edit directors"); // NOI18N
        btnAddDirectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDirectorsbtnEditDirectorsActionPerformed(evt);
            }
        });
        add(btnAddDirectors, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 280, 140, 30));

        lbActorsError.setForeground(new java.awt.Color(204, 0, 0));
        lbActorsError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lbActorsError, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 110, 20, 30));

        lbDirectorsError.setForeground(new java.awt.Color(204, 0, 0));
        lbDirectorsError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lbDirectorsError, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 240, 20, 30));

        tblMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMoviesMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblMoviesMouseReleased(evt);
            }
        });
        tblMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblMoviesKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tblMovies);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 369, 1190, 330));

        btnChoose.setText("Choose");
        btnChoose.setName("Choose"); // NOI18N
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });
        add(btnChoose, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 320, 100, 30));

        tfPicturePath.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tfPicturePath.setEnabled(false);
        add(tfPicturePath, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 320, 410, 30));

        lbIconError.setForeground(new java.awt.Color(204, 0, 0));
        lbIconError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lbIconError, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 20, 20));

        btnDelete.setBackground(new java.awt.Color(204, 0, 0));
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setName("Delete"); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 320, 100, 30));

        btnAdd.setBackground(new java.awt.Color(0, 0, 255));
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.setName("Add"); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 320, 100, 30));

        btnUpdate.setText("Update");
        btnUpdate.setName("Update"); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 320, 100, 30));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Description");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 130, 100, 30));

        btnAddGenre.setText("Add genre");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });
        add(btnAddGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 280, 170, 30));

        tfOrigName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        add(tfOrigName, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, 410, 30));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Original name");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, 100, 30));

        lbOrigNameError.setForeground(new java.awt.Color(204, 0, 0));
        lbOrigNameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lbOrigNameError, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 90, 20, 30));

        jScrollPane5.setViewportView(lsGenre);

        add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 160, 170, 120));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActorsbtnEditActorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActorsbtnEditActorsActionPerformed
        List<Person> actors = new ArrayList<>();

        convertPersonModelToList(actors, lsActors);

        try {
            new PersonDialog(parent, true, repository.selectActors(), actors, PersonTypeDialog.ACTOR).setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddActorsbtnEditActorsActionPerformed

    private void btnAddDirectorsbtnEditDirectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDirectorsbtnEditDirectorsActionPerformed
        List<Person> directors = new ArrayList<>();

        convertPersonModelToList(directors, lsDirectors);

        try {
            new PersonDialog(parent, true, repository.selectDirectors(), directors, PersonTypeDialog.DIRECTOR).setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddDirectorsbtnEditDirectorsActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        Optional<File> file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.get().getAbsolutePath());
        setIcon(lbIcon, file.get());
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteMovie();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        addMovie();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        updateMovie();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblMoviesKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
            showMovieDetails();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            tblMovies.clearSelection();
            clearForm();
        }
    }//GEN-LAST:event_tblMoviesKeyReleased

    private void tblMoviesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMoviesMouseReleased
        showMovieDetails();
    }//GEN-LAST:event_tblMoviesMouseReleased

    private void tblMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMoviesMouseClicked
        showMovieDetails();
    }//GEN-LAST:event_tblMoviesMouseClicked

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        clearForm();
        tblMovies.clearSelection();
    }//GEN-LAST:event_formComponentHidden

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
        try {
            Set<String> genres = new TreeSet<>();

            getGenres(genres);
            Set<String> genreSet = ListUtils.convertStringModelToSet((DefaultListModel<String>)lsGenre.getModel());

            new GenreDialog(parent, true, genres, genreSet).setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(UserUIMovieTab.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAddGenreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddActors;
    private javax.swing.JButton btnAddDirectors;
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbActorsError;
    private javax.swing.JLabel lbDirectorsError;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbIconError;
    private javax.swing.JLabel lbOrigNameError;
    private javax.swing.JLabel lbPubDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Person> lsDirectors;
    private javax.swing.JList<String> lsGenre;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tblMovies;
    private javax.swing.JTextField tfOrigName;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        initValidation();
        initRepository();
        initTable();

    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() {
        try {
            movieTableModel = new MovieTableModel(repository.selectMovies());

        } catch (Exception ex) {
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        tblMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblMovies.setAutoCreateRowSorter(true);
        tblMovies.setRowHeight(25);
        tblMovies.setModel(movieTableModel);

    }

    private void addMovie() {
        if (ValidationUtils.CheckFormValidation(validationFields, errorLabels)) {
            try {
                String localPicturePath = uploadPicture();
                List<Person> actors = new ArrayList<>();
                List<Person> directors = new ArrayList<>();

                convertPersonModelToList(actors, lsActors);
                convertPersonModelToList(directors, lsDirectors);

                String genre = ListUtils.convertStringModelToString((DefaultListModel<String>) lsGenre.getModel());

                Movie movie = new Movie(
                        tfTitle.getText().trim(),
                        Optional.of(LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER)),
                        taDescription.getText().trim(),
                        directors,
                        actors,
                        genre,
                        localPicturePath,
                        tfOrigName.getText().trim()
                );
                repository.createMovie(movie);
                movieTableModel.SetMovies(repository.selectMovies());

                clearForm();

            } catch (Exception ex) {
                Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    private void updateMovie() {
        Movie movie = new Movie();
        List<Person> actors = new ArrayList<>();
        List<Person> directors = new ArrayList<>();

        try {
            if (ValidationUtils.CheckFormValidation(validationFields, errorLabels)) {
                int selectedRow = tblMovies.getSelectedRow();
                int rowIndex = tblMovies.convertRowIndexToModel(selectedRow);
                int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);

                getMovieData(movie, actors, directors);

                try {
                    repository.updateMovie(selectedMovieId, movie);
                    clearForm();
                    tblMovies.clearSelection();
                    initTable();
                } catch (Exception ex) {
                    Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (Exception e) {
            MessageUtils.showErrorMessage("Action error", "Please select a movie");
        }
    }

    private void deleteMovie() {
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a movie to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Do you really want to delete movie?") == JOptionPane.YES_OPTION) {
            try {
                Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                repository.deleteMovie(selectedMovie.getId());
                movieTableModel.SetMovies(repository.selectMovies());

                clearForm();
            } catch (Exception e) {
                MessageUtils.showErrorMessage("Error", "Unable to delete movie");
            }
        }

    }

    private void getMovieData(Movie movie, List<Person> actors, List<Person> directors) {
        movie.setTitle(tfTitle.getText());
        movie.setPublishedDate(Optional.of(LocalDateTime.parse(tfPubDate.getText())));
        movie.setDescription(taDescription.getText());

        String genre = ListUtils.convertStringModelToString((DefaultListModel<String>) lsGenre.getModel());

        movie.setGenre(genre);
        movie.setPicturePath(tfPicturePath.getText());
        movie.setOrigName(tfOrigName.getText());

        convertPersonModelToList(actors, lsActors);
        movie.setActors(actors);

        convertPersonModelToList(directors, lsDirectors);
        movie.setDirectors(directors);
    }

    private void convertPersonModelToList(List<Person> people, JList<Person> list) {
        ListModel<Person> model = list.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            people.add(model.getElementAt(i));
        }
    }

    private void showMovieDetails() {
        clearForm();
        int selectedRow = tblMovies.getSelectedRow();
        int rowIndex = tblMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = repository.selectMovie(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
            }
        } catch (IllegalArgumentException ie) {
            MessageUtils.showErrorMessage("Error", "Data is corrupted, delete to proceed");
            deleteMovie();
        } catch (Exception e) {
            MessageUtils.showErrorMessage("Error", "Could not load details");
        }

    }

    private void clearForm() {
        validationFields.forEach(e -> {
            if (e instanceof JTextComponent) {
                ((JTextComponent) e).setText("");
            }
        });
        errorLabels.forEach(e -> e.setText(""));

        tfPicturePath.setText("");
        lbIcon.setIcon(new ImageIcon(getClass().getResource("")));
        taDescription.setText("");
        lsActors.setModel(new DefaultListModel<>());
        lsDirectors.setModel(new DefaultListModel<>());
        lsGenre.setModel(new DefaultListModel<>());

        selectedMovie = null;
    }

    private void fillForm(Movie movie) {

        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath()))) {
            tfPicturePath.setText(movie.getPicturePath());
            setIcon(lbIcon, new File(movie.getPicturePath()));
        } else {
            tfPicturePath.setText("");
            lbIcon.setIcon(new ImageIcon(getClass().getResource("")));
        }

        tfTitle.setText(movie.getTitle());
        taDescription.setText(movie.getDescription());
        taDescription.setCaretPosition(0);
        try {
            tfPubDate.setText(movie.getPublishedDate().get().format(Movie.DATE_FORMATTER));
        } catch (Exception e) {
            tfPubDate.setText("");
        }

        DefaultListModel<String> genreModel = ListUtils.convertStringToStringModel(movie.getGenre());

        lsGenre.setModel(genreModel);
        tfOrigName.setText(movie.getOrigName());

        actorModel.clear();
        if (movie.getActors() != null) {
            movie.getActors().forEach(a -> actorModel.addElement(a));
            lsActors.setModel(actorModel);
        }

        directorModel.clear();
        if (movie.getDirectors() != null) {
            movie.getDirectors().forEach(d -> directorModel.addElement(d));
            lsDirectors.setModel(directorModel);
        }
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.getAbsolutePath(), label.getWidth(), label.getHeight()));
        } catch (IOException e) {
            MessageUtils.showErrorMessage("Error", "Unable to set icon");
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfPubDate, lsGenre, lsActors, lsDirectors, lbIcon, tfOrigName, lbIcon);
        errorLabels = Arrays.asList(lbTitleError, lbPubDateError, lbGenreError, lbActorsError, lbDirectorsError, lbIconError, lbOrigNameError, lbIconError);
    }

    private String uploadPicture() throws IOException {
        String picturePath = tfPicturePath.getText().trim();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = Math.abs(RANDOM.nextInt()) + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }

    private void getGenres(Set<String> genreList) throws Exception {
        for (Movie movie : repository.selectMovies()) {
            String[] genreArray = new String[0];
            if (movie.getGenre() != null) {
                genreArray = movie.getGenre().toLowerCase().split(", ");
            }
            

            genreList.addAll(Arrays.asList(genreArray));
        }
    }

    public void addPeople(DefaultListModel<Person> people, PersonTypeDialog type) {
        if (type == PersonTypeDialog.ACTOR) {
            lsActors.setModel(people);

        } else {
            lsDirectors.setModel(people);
        }
        SwingUtilities.updateComponentTreeUI(this);
    }

    public void addGenre(DefaultListModel<String> genre) {
        lsGenre.setModel(genre);
    }

    public void refreshTable(List<Movie> movies) {
        try {
            movieTableModel = new MovieTableModel(movies);
        } catch (Exception ex) {
            Logger.getLogger(UserUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        tblMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblMovies.setAutoCreateRowSorter(true);
        tblMovies.setRowHeight(25);
        tblMovies.setModel(movieTableModel);
    }

}
